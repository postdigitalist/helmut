{"remainingRequest":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\example\\things-i-learned-in-2020.md?vue&type=template&id=17ef45dc&","dependencies":[{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\example\\things-i-learned-in-2020.md","mtime":1624231738863},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624215077198},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1623016856735},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624215077198},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":1623016856735},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1624215078862}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdignRW5kLW9mLXRoZS15ZWFyICJiYWxhbmNlcyIgYXJlIGRpc3Rhc3RlZnVsLCBib3JpbmcsIGFuZCAnKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJkw6ltb2TDqSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gRXNwZWNpYWxseSwgaWYgdGhleSdyZSBsb25nLiBBbmQsIGhvdyBjYW4gb25lIHByb2R1Y2UgYW4gaW50ZXJlc3RpbmcgcGVyc29uYWwgdmVyZGljdCBvbiB0aGlzIGhvcnJpZCB5ZWFyPyBJZiB5b3UgaGFkIGEgdGVycmlibGUgeWVhciwgaXQncyBubyBuZXdzIGFuZCBvdGhlcnMgcHJvYmFibHkgaGFkIGl0IHdvcnNlLCBzbyBwbGVhc2UgcmVtYWluIHF1aWV0LiBJZiB5b3UgaGFkIGEgZ29vZCB5ZWFyIGRlc3BpdGUgdGhlIGNvbnRleHQgKG9yIGR1ZSB0byB0aGUgY29udGV4dCwgaWYgeW91J3JlIGluIG9uZSBvZiB0aG9zZSBpbmR1c3RyaWVzIHRoYXQgYmxvb20gZHVyaW5nIHRoaXMgdHlwZSBvZiBjcmlzaXMpLCBjb25ncmF0dWxhdGlvbnMgb24geW91ciBnb29kIGZvcnR1bmUsIHBsZWFzZSByZW1haW4gcXVpZXQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSSdtIHN1cmUgdGhhdCBJIGZlZWwgdGhlIG9ibGlnYXRpb24gdG8gcHJvZHVjZSBhbiBcImVuZC1vZi10aGUteWVhclwiIHBvc3QgYmVjYXVzZSBJJ20gZ2V0dGluZyBvbGQuIEJ1dCBhdCBsZWFzdCBJIHdvbid0IG1ha2UgaXQgYSBzY2FyY2Ugc2VsZWN0aW9uIG9mIHRvbmUtZGVhZiBhbmVjZG90ZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSGVyZSBhcmUgMjAgdGhpbmdzIEkgbGVhcm5lZCBpbiAyMDIwLCBmb3JtYXR0ZWQgYXMgaW5zdHJ1Y3Rpb25zIHRvIG15c2VsZjoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMjAtdGhpbmdzLWktbGVhcm5lZC1pbi0yMDIwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMjAtdGhpbmdzLWktbGVhcm5lZC1pbi0yMDIwIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMjAgdGhpbmdzIEkgbGVhcm5lZCBpbiAyMDIwIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiR2V0IGV2ZXJ5dGhpbmcgZG93biBpbiB3cml0aW5nLiBBbHdheXMuIEl0J3MgYSBub24tbmVnb3RpYWJsZS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRG9uJ3QgYmUgdG9vIGVhc3kuIEEgYmFja2JvbmUgaXMgYSBzaWduIG9mIGNvbXBldGVuY2UgYW5kIHNlbGYtcmVzcGVjdC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQmVjb21lIGFic29sdXRlbHkgaW5zdWZmZXJhYmxlIGZvciBhYnVzaXZlIG9yIGRpc3Jlc3BlY3RmdWwgcGVvcGxlLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoJ0FzayBhbGwgbmVjZXNzYXJ5IHF1ZXN0aW9ucywgZXZlbiB0aGUgInRvdWNoeSIgb25lcy4nKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIktpbmRuZXNzIGlzIGEgaGlnaCBmb3JtIG9mIGRpc2NpcGxpbmUuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJSZXNwZWN0IHRoZSB3b3JrLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiR2V0IDggaG91cnMgb2Ygc2xlZXAuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBc3BpcmUgdG8gYSA2LWhvdXIgd29ya2RheS4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlJlc3BlY3Qgb3RoZXIgcGVvcGxlJ3MgdGltZS4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRvbid0IGNoZWF0IHRoZSBwcm9jZXNzLiBJZiBzb21ldGhpbmcgdGFrZXMgdHdvIG1vbnRocywgaXQgdGFrZXMgdHdvIG1vbnRocy4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQSBnb29kIHdvL21hbiBpcyBoYXJkIHRvIGZpbmQuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFdmVyeXRoaW5nIHlvdSBjcmVhdGUgc2hvdWxkIGJlIGFuIGVudGl0eSBzZXBhcmF0ZSBmcm9tIHlvdXJzZWxmLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNYWtlIHlvdXJzZWxmIGlycmVsZXZhbnQgb3Igc29tZW9uZSBlbHNlIHdpbGwuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFdmVyeSBodW1hbiBncm91cCBpcyBtaXNlcmFibGUgdG8gc29tZSBkZWdyZWUuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJNb3N0IHBlb3BsZSBkb24ndCBiZWxpZXZlIHdoYXQgdGhleSBzYXkuIEFzc3VtZSBoeXBvY3Jpc3kgYXMgZGVmYXVsdC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiWW91IGNhbiBoYXZlIHRoZSBhZXN0aGV0aWNzIG9mIGxpYmVyYXRpb24gd2l0aG91dCBsaWJlcmF0aW9uLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJMb3ZlIHlvdXIgcGFydG5lciB0byB0aGUgYmVzdCBvZiB5b3VyIGFiaWxpdHkuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJQZXR0aW5lc3MgaXMgYSBwcml2aWxlZ2UuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJZb3UgKHByb2JhYmx5KSBsaXZlIGluIGEgbWljcm9jb3NtIG9mIHByaXZpbGVnZS4gVGhlIHBlcnNvbiB5b3Ugc2hvdWxkIGJlIGJ1aWxkaW5nIGEgZnV0dXJlIGZvciBpcyBzb21lb25lIHlvdSBkb24ndCBldmVuIGtub3cuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkRpdmVyc2l0eSBvZiBtb3RpdmF0aW9uIGNhbiBiZSBzb21laG93IGNvbXBhcmVkIHRvIG51dHJpdGlvbmFsIGRpdmVyc2l0eS4gWW91IGNhbid0IHJ1biBvbiBzZWxmLWludGVyZXN0IGFsb25lLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwOi8vd3d3LmthbGVuaG9sbG9tb24uY29tL2ZvcnR1bmUtcG9ydHJhaXRzLTIwMTYiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJBcnQgYnkgS2FsZW4gSG9sbG9tb24uIildKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}