{"remainingRequest":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\example\\make-the-web-ugly-again.md?vue&type=template&id=a394884c&","dependencies":[{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\example\\make-the-web-ugly-again.md","mtime":1624231838935},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624215077198},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1623016856735},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624215077198},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":1623016856735},{"path":"C:\\Users\\Helmut\\Desktop\\Office\\vuepress\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1624215078862}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}